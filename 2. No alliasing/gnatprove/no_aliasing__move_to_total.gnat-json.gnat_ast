(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "total" defined at no_aliasing.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module No_aliasing__total
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val total [model_trace:854] [model_projected]
  [name:Total] [sloc:no_aliasing.adb:5]: int

end

(* Module for defining a ref holding the value of variable "source" defined at no_aliasing.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module No_aliasing__move_to_total__source
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val source [model_projected] [name:Source]
  [model_trace:860] [sloc:no_aliasing.adb:7]: int

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "total" defined at no_aliasing.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module No_aliasing__total___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "source" defined at no_aliasing.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module No_aliasing__move_to_total__source___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "move_to_total" defined at no_aliasing.adb:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module No_aliasing__move_to_total__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Boolean
  use        Standard__integer
  use        Standard__natural___axiom
  use        No_aliasing__total
  use        No_aliasing__move_to_total__source
  use        Standard__natural___axiom
  use        Standard__integer___axiom
  use        No_aliasing__total___axiom
  use        No_aliasing__move_to_total__source___axiom
  
  function [GP_Subp:no_aliasing.adb:7] [sloc:no_aliasing.adb:7] def
    (__void_param : unit) requires { True } ensures 
    { ([sloc:no_aliasing.adb:8] ([GP_Reason:VC_POSTCONDITION] [model_vc_post]
                                [comment:     with Post => Total = Total'Old + Source'Old and Source = 0                   ^ no_aliasing.adb:8:19:VC_POSTCONDITION]
                                [GP_Id:4] [GP_Shape:pragargs__and]
                                [GP_Sloc:no_aliasing.adb:8:19] (([GP_Pretty_Ada:871]
                                                                [GP_Sloc:no_aliasing.adb:8:19] (
                                                                !No_aliasing__total.total
                                                                  = (
                                                                  --pp_tagged NOT IMPLEMENTED
                                                                    + --pp_tagged NOT IMPLEMENTED)))
                                                                  /\
                                                                  ([GP_Sloc:no_aliasing.adb:8:54]
                                                                  [GP_Pretty_Ada:881] (
                                                                  !No_aliasing__move_to_total__source.source
                                                                    = 0))))) }
    returns
     = (* Assume dynamic invariants of inputs of the subprogram no_aliasing.adb:7 *);
        assume
        { (Standard__natural___axiom.dynamic_invariant
             !No_aliasing__total.total True False True True) };
        assume
        { (Standard__natural___axiom.dynamic_invariant
             !No_aliasing__move_to_total__source.source True False True True) };
        (* Assume moved pointers in outputs of the subprogram no_aliasing.adb:7 *);
        (* Check for RTE in the Pre of the subprogram no_aliasing.adb:7 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram no_aliasing.adb:7 *);
        (let ([mlw:proxy_symbol] [introduced] temp___old_187) =
        !No_aliasing__move_to_total__source.source in
        (let ([mlw:proxy_symbol] [introduced] temp___old_186) =
        !No_aliasing__total.total in (try
        ();
          ([sloc:no_aliasing.adb:8] ());
          ();
          ([GP_Sloc:no_aliasing.adb:11:7] ([sloc:no_aliasing.adb:11] ()));
          ([GP_Sloc:no_aliasing.adb:11:17] ([sloc:no_aliasing.adb:11] ()));
          ([GP_Sloc:no_aliasing.adb:11:14] ([sloc:no_aliasing.adb:11] (
                                           No_aliasing__total.total :=
                                           ( ([sloc:no_aliasing.adb:11] 
                                             ([GP_Sloc:no_aliasing.adb:11:23]
                                             [vc:annotation]
                                             [GP_Reason:VC_OVERFLOW_CHECK]
                                             [comment:      Total  := Total + Source;                       ^ no_aliasing.adb:11:23:VC_OVERFLOW_CHECK]
                                             [GP_Shape:total_assign__add]
                                             [GP_Id:2] (Standard__integer.range_check_
                                                          (!No_aliasing__total.total
                                                             + !No_aliasing__move_to_total__source.source))))))));
          ([GP_Sloc:no_aliasing.adb:12:14] ([sloc:no_aliasing.adb:12] (
                                           No_aliasing__move_to_total__source.source
                                           := ( 0))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures
        { True } begin  (let _ =
                       (_gnatprove_standard.Boolean.andb
                          (!No_aliasing__total.total
                             = ([sloc:no_aliasing.adb:8] ([GP_Sloc:no_aliasing.adb:8:37]
                                                         [vc:annotation]
                                                         [GP_Reason:VC_OVERFLOW_CHECK]
                                                         [GP_Id:3]
                                                         [comment:     with Post => Total = Total'Old + Source'Old and Source = 0                                     ^ no_aliasing.adb:8:37:VC_OVERFLOW_CHECK]
                                                         [GP_Shape:pragargs__and__cmp__add] (
                                                         Standard__integer.range_check_
                                                           (([mlw:proxy_symbol]
                                                              [introduced] temp___old_186)
                                                              + ([mlw:proxy_symbol]
                                                              [introduced] temp___old_187))))))
                          (!No_aliasing__move_to_total__source.source = 0))
                       in ())  end))

end
