(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "total" defined at no_aliasing.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module No_aliasing__total
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val total [model_trace:854] [model_projected]
  [name:Total] [sloc:no_aliasing.adb:5]: int

end

(* Module for declaring a program function (and possibly an axiom) for "move_to_total" defined at no_aliasing.adb:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module No_aliasing__move_to_total___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural___axiom
  use        No_aliasing__total
  
  function   move_to_total (source : int__ref) requires { True } ensures 
    { ((([GP_Pretty_Ada:871] (!No_aliasing__total.total
                                = (--pp_tagged NOT IMPLEMENTED
                                     + --pp_tagged NOT IMPLEMENTED))) /\
          ([GP_Pretty_Ada:881] (!source = 0))) /\
         ((Standard__natural___axiom.dynamic_invariant !source True True True
             True) /\
            (Standard__natural___axiom.dynamic_invariant
               !No_aliasing__total.total True True True True))) } returns
    unit

end

(* Module for defining a ref holding the value of variable "x" defined at no_aliasing.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module No_aliasing__x
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val x [model_trace:893] [model_projected]
  [name:X] [sloc:no_aliasing.adb:15]: int

end

(* Module giving an empty axiom for the entity "total" defined at no_aliasing.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module No_aliasing__total___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "x" defined at no_aliasing.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module No_aliasing__x___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "no_aliasing" defined at no_aliasing.adb:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module No_aliasing__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural___axiom
  use        No_aliasing__total
  use        No_aliasing__move_to_total___axiom
  use        No_aliasing__x
  use        Standard__natural___axiom
  use        No_aliasing__total___axiom
  use        No_aliasing__move_to_total___axiom
  use        No_aliasing__x___axiom
  
  function [GP_Subp:no_aliasing.adb:1] [sloc:no_aliasing.adb:1] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram no_aliasing.adb:1 *);
        (* Assume moved pointers in outputs of the subprogram no_aliasing.adb:1 *);
        (* Check for RTE in the Pre of the subprogram no_aliasing.adb:1 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram no_aliasing.adb:1 *);
        (try
        ();
          ([sloc:no_aliasing.adb:2] ());
          ([sloc:no_aliasing.adb:5] ( No_aliasing__total.total :=
          ( 0));
          assume
          { (Standard__natural___axiom.dynamic_invariant
               !No_aliasing__total.total True False True True) });
          ([sloc:no_aliasing.adb:7] ());
          ([sloc:no_aliasing.adb:15] ( No_aliasing__x.x := ( 3));
          assume
          { (Standard__natural___axiom.dynamic_invariant !No_aliasing__x.x
               True False True True) });
          ();
          ([GP_Sloc:no_aliasing.adb:18:19] ([sloc:no_aliasing.adb:18] ()));
          ([GP_Sloc:no_aliasing.adb:18:4] ([sloc:no_aliasing.adb:18] ()));
          ([GP_Sloc:no_aliasing.adb:18:4] ([sloc:no_aliasing.adb:18] (let ([mlw:proxy_symbol]
                                          [introduced] temp___compl_182) =
                                          !No_aliasing__x.x in
                                          ( any --pp_effects NOT IMPLEMENTED
                                             pre {}
                                          post {} return unit);
          (No_aliasing__move_to_total___axiom.move_to_total No_aliasing__x.x);
          ())));
        ([GP_Sloc:no_aliasing.adb:19:4] ([sloc:no_aliasing.adb:19] abstract
                                        ensures
                                        { True } begin  (let _ =
                                                       (!No_aliasing__total.total
                                                          = 3)
                                                       in ())  end;
                                        assert
                                        { ([sloc:no_aliasing.adb:19] 
                                          ([GP_Shape:pragargs__cmp]
                                          [vc:annotation]
                                          [GP_Reason:VC_ASSERT]
                                          [GP_Sloc:no_aliasing.adb:19:19]
                                          [GP_Id:0]
                                          [comment:   pragma Assert (Total = 3); -- OK                   ^ no_aliasing.adb:19:19:VC_ASSERT] 
                                          ([GP_Pretty_Ada:906]
                                          [GP_Sloc:no_aliasing.adb:19:19] (
                                          !No_aliasing__total.total = 3)))) }));
        ([GP_Sloc:no_aliasing.adb:20:19] ([sloc:no_aliasing.adb:20] ()));
        ([GP_Sloc:no_aliasing.adb:20:4] ([sloc:no_aliasing.adb:20] ()));
        ([GP_Sloc:no_aliasing.adb:20:4] ([sloc:no_aliasing.adb:20] (let ([mlw:proxy_symbol]
                                        [introduced] temp___compl_183) =
                                        !No_aliasing__total.total in
                                        --pp_binding_ref NOT IMPLEMENTED)));
        ([GP_Sloc:no_aliasing.adb:21:4] ([sloc:no_aliasing.adb:21] abstract
                                        ensures
                                        { True } begin  (let _ =
                                                       (!No_aliasing__total.total
                                                          = 6)
                                                       in ())  end;
                                        assert
                                        { ([sloc:no_aliasing.adb:21] 
                                          ([comment:   pragma Assert (Total = 6); -- runtime error                   ^ no_aliasing.adb:21:19:VC_ASSERT]
                                          [GP_Shape:pragargs__cmp]
                                          [vc:annotation]
                                          [GP_Reason:VC_ASSERT]
                                          [GP_Sloc:no_aliasing.adb:21:19]
                                          [GP_Id:1] ([GP_Pretty_Ada:915]
                                                    [GP_Sloc:no_aliasing.adb:21:19] (
                                                    !No_aliasing__total.total
                                                      = 6)))) }));
        raise Return__exc with | Return__exc  -> ());
    abstract ensures { True } begin  (let _ = True in ())  end

end
