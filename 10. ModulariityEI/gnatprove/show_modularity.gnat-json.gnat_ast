(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "x" defined at show_modularity.adb:11, created in Gnat2Why.Decls.Translate_Variable *)
module Show_modularity__x
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val x [model_trace:868] [model_projected]
  [name:X] [sloc:show_modularity.adb:11]: int

end

(* Module giving an empty axiom for the entity "x" defined at show_modularity.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Show_modularity__x___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "show_modularity" defined at show_modularity.adb:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Show_modularity__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer___axiom
  use        Show_modularity__x
  use        Standard__integer___axiom
  use        Standard__integer___axiom
  use        Show_modularity__x___axiom
  
  function [GP_Subp:show_modularity.adb:1] [sloc:show_modularity.adb:1] def
    (__void_param : unit) requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram show_modularity.adb:1 *);
        (* Assume moved pointers in outputs of the subprogram show_modularity.adb:1 *);
        (* Check for RTE in the Pre of the subprogram show_modularity.adb:1 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram show_modularity.adb:1 *);
        (try
        ();
          ([sloc:show_modularity.adb:2] ());
          ([sloc:show_modularity.adb:5] ());
          ([sloc:show_modularity.adb:5] ());
          ([sloc:show_modularity.adb:5] ());
          ([sloc:show_modularity.adb:11] assume
          { (Standard__integer___axiom.default_initial_assumption
               !Show_modularity__x.x False) };
          assume
          { (Standard__integer___axiom.dynamic_invariant
               !Show_modularity__x.x False False True True) });
          ();
          ([GP_Sloc:show_modularity.adb:13:4] ([sloc:show_modularity.adb:13] ()));
          ([GP_Sloc:show_modularity.adb:13:6] ([sloc:show_modularity.adb:13] (
                                              Show_modularity__x.x :=
                                              ( 2147483645))));
          ([GP_Sloc:show_modularity.adb:14:15] ([sloc:show_modularity.adb:14] ()));
          ([GP_Sloc:show_modularity.adb:14:4] ([sloc:show_modularity.adb:14] ()));
          ([GP_Sloc:show_modularity.adb:14:4] ([sloc:show_modularity.adb:14] 
                                              ([sloc:show_modularity.adb:14] abstract
                                              ensures
                                              { True } begin  (let _ =
                                                             !Show_modularity__x.x
                                                             in ())  end)));
          ([GP_Sloc:show_modularity.adb:14:4] ([sloc:show_modularity.adb:14] ()));
          ([GP_Sloc:show_modularity.adb:7:9:inlined:show_modularity.adb:14:4] 
          ([sloc:show_modularity.adb:7] ( Show_modularity__x.x :=
          ( ([sloc:show_modularity.adb:7] ([vc:annotation]
                                          [GP_Sloc:show_modularity.adb:7:14:inlined:show_modularity.adb:14:4]
                                          [GP_Reason:VC_OVERFLOW_CHECK]
                                          [comment:      X := X + 1;              ^ show_modularity.adb:7:14:inlined:show_modularity.adb:14:4:VC_OVERFLOW_CHECK]
                                          [GP_Shape:x_assign__add]
                                          [GP_Id:0] (Standard__integer.range_check_
                                                       (!Show_modularity__x.x
                                                          + 1))))))));
          ([GP_Sloc:show_modularity.adb:15:4] ([sloc:show_modularity.adb:15] ()));
          ([GP_Sloc:show_modularity.adb:15:9] ([sloc:show_modularity.adb:15] ()));
          ([GP_Sloc:show_modularity.adb:15:6] ([sloc:show_modularity.adb:15] (
                                              Show_modularity__x.x :=
                                              ( ([sloc:show_modularity.adb:15] 
                                                ([comment:   X := X + 1;           ^ show_modularity.adb:15:11:VC_OVERFLOW_CHECK]
                                                [vc:annotation]
                                                [GP_Reason:VC_OVERFLOW_CHECK]
                                                [GP_Shape:x_assign__add]
                                                [GP_Id:1]
                                                [GP_Sloc:show_modularity.adb:15:11] (
                                                Standard__integer.range_check_
                                                  (!Show_modularity__x.x + 1))))))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures { True } begin  (let _ = True in ())  end

end
