(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type natural  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = natural,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type natural__ref  = { mutable natural__content : natural }
  
  function   natural__ref_natural__content__projection (a : natural__ref)
    requires {  } ensures  {  } returns natural = a.natural__content
  
  meta model_projection function natural__ref_natural__content__projection
  
  meta inline:no function natural__ref_natural__content__projection
  
  function   natural__havoc (x : natural__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
  
  use        Standard__natural
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__natural.natural) requires { True }
    ensures  { True } returns int = (Standard__natural.natural'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__natural.natural,
    predicate in_range = Standard__natural.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "nat_array" defined at show_runtime_errors.ads:5, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__natural
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  use        Standard__natural__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a ref holding the value of variable "a" defined at show_runtime_errors.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Show_runtime_errors__update__a
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer
  use        Array__Int__Standard__natural
  
  val a [model_trace:903] [model_projected]
  [name:A] [sloc:show_runtime_errors.ads:7]: Array__Int__Standard__natural.map
  
  function [model_trace:903'First] [model_projected] [name:A]
    [sloc:show_runtime_errors.ads:7] a__first () requires {  } ensures  {  }
    returns Standard__integer.integer
  
  function [model_projected] [name:A] [model_trace:903'Last]
    [sloc:show_runtime_errors.ads:7] a__last () requires {  } ensures  {  }
    returns Standard__integer.integer

end

(* Module for defining the constant "i" defined at show_runtime_errors.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Show_runtime_errors__update__i
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:906] [name:I] [sloc:show_runtime_errors.ads:7] i 
    () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "j" defined at show_runtime_errors.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Show_runtime_errors__update__j
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:907] [name:J] [sloc:show_runtime_errors.ads:7] j 
    () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "p" defined at show_runtime_errors.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Show_runtime_errors__update__p
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:908] [name:P] [sloc:show_runtime_errors.ads:7] p 
    () requires {  } ensures  {  } returns int

end

(* Module for defining the constant "q" defined at show_runtime_errors.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Show_runtime_errors__update__q
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  function [model_trace:909] [name:Q] [sloc:show_runtime_errors.ads:7] q 
    () requires {  } ensures  {  } returns int

end

(* Module for axiomatizing type "nat_array" defined at show_runtime_errors.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Show_runtime_errors__nat_array
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__integer
  use        Standard__natural
  use        Standard__integer__rep
  use        Array__Int__Standard__natural
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__natural.map,
    function array_bool_eq = Array__Int__Standard__natural.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__integer.dynamic_property,
    predicate index_rep_le = <=
  
  type nat_array  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type nat_array__ref  = { mutable nat_array__content : nat_array }
  
  function   nat_array__ref_nat_array__content__projection
    (a : nat_array__ref) requires {  } ensures  {  } returns
    nat_array = a.nat_array__content
  
  meta model_projection function nat_array__ref_nat_array__content__projection
  
  meta inline:no function nat_array__ref_nat_array__content__projection
  
  function   nat_array__havoc (x : nat_array__ref) requires {  } ensures 
    {  } returns unit

end

(* Module for axiomatizing type "S1b" defined at show_runtime_errors.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Show_runtime_errors__update__S1b
  
  use export Show_runtime_errors__nat_array
  use import _gnatprove_standard.Main
  use import int.Int
  
  type s1b  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  type s1b__ref  = { mutable s1b__content : s1b }
  
  function   s1b__ref_s1b__content__projection (a : s1b__ref) requires {  }
    ensures  {  } returns s1b = a.s1b__content
  
  meta model_projection function s1b__ref_s1b__content__projection
  
  meta inline:no function s1b__ref_s1b__content__projection
  
  function   s1b__havoc (x : s1b__ref) requires {  } ensures  {  } returns
    unit

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__natural
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_46) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_42) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_43) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_44) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_45) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_42) = True) \/
          (Standard__natural.first <= Standard__natural.last))
       then
       (Standard__natural.dynamic_property Standard__natural.first
          Standard__natural.last ([mlw:proxy_symbol]
          [introduced] temp___expr_46))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_47) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_48) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "nat_array" defined at show_runtime_errors.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Show_runtime_errors__nat_array___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer
  use        Show_runtime_errors__nat_array
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_166) : Show_runtime_errors__nat_array.nat_array
    ([mlw:proxy_symbol] [introduced] temp___is_init_162) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_164) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_165) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_163) then
       True  else
       (Show_runtime_errors__nat_array.dynamic_property
          Standard__integer.first Standard__integer.last
          (Show_runtime_errors__nat_array.first ([mlw:proxy_symbol]
             [introduced] temp___expr_166))
          (Show_runtime_errors__nat_array.last ([mlw:proxy_symbol]
             [introduced] temp___expr_166))))

end

(* Module giving an empty axiom for the entity "a" defined at show_runtime_errors.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Show_runtime_errors__update__a___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "i" defined at show_runtime_errors.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Show_runtime_errors__update__i___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "j" defined at show_runtime_errors.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Show_runtime_errors__update__j___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "p" defined at show_runtime_errors.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Show_runtime_errors__update__p___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "q" defined at show_runtime_errors.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Show_runtime_errors__update__q___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving axioms for type "S1b" defined at show_runtime_errors.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Show_runtime_errors__update__S1b___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__integer__rep
  use        Show_runtime_errors__update__a
  use        Show_runtime_errors__update__S1b
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_174) : Show_runtime_errors__update__S1b.s1b
    ([mlw:proxy_symbol] [introduced] temp___is_init_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_172) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_173) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_171) then
       True  else
       (((Show_runtime_errors__update__S1b.dynamic_property
            (Standard__integer__rep.to_rep
               Show_runtime_errors__update__a.a__first)
            (Standard__integer__rep.to_rep
               Show_runtime_errors__update__a.a__last)
            (Show_runtime_errors__update__S1b.first ([mlw:proxy_symbol]
               [introduced] temp___expr_174))
            (Show_runtime_errors__update__S1b.last ([mlw:proxy_symbol]
               [introduced] temp___expr_174))) /\
           ((Show_runtime_errors__update__S1b.first ([mlw:proxy_symbol]
               [introduced] temp___expr_174))
              = (Standard__integer__rep.to_rep
                   Show_runtime_errors__update__a.a__first))) /\
          ((Show_runtime_errors__update__S1b.last ([mlw:proxy_symbol]
              [introduced] temp___expr_174))
             = (Standard__integer__rep.to_rep
                  Show_runtime_errors__update__a.a__last))))
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_176) : Show_runtime_errors__update__S1b.s1b
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_177) : bool)
    requires { True } ensures  { True } returns
     = (True /\
          ((Show_runtime_errors__update__S1b.first ([mlw:proxy_symbol]
              [introduced] temp___expr_176))
             = (Standard__integer__rep.to_rep
                  Show_runtime_errors__update__a.a__first)) /\
          ((Show_runtime_errors__update__S1b.last ([mlw:proxy_symbol]
              [introduced] temp___expr_176))
             = (Standard__integer__rep.to_rep
                  Show_runtime_errors__update__a.a__last)))

end

(* Module for checking contracts and absence of run-time errors in subprogram "update" defined at show_runtime_errors.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Show_runtime_errors__update__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Int_Division
  use        Standard__integer
  use        Standard__integer
  use        Standard__integer___axiom
  use        Standard__natural
  use        Standard__natural__rep
  use        Standard__integer__rep
  use        Array__Int__Standard__natural
  use        Show_runtime_errors__update__a
  use        Show_runtime_errors__update__i
  use        Show_runtime_errors__update__j
  use        Show_runtime_errors__update__p
  use        Show_runtime_errors__update__q
  use        Array__Int__Standard__natural
  use        Show_runtime_errors__nat_array
  use        Show_runtime_errors__update__S1b
  use        Array__Int__Standard__natural
  use        Array__Int__Standard__natural
  use        Standard__integer___axiom
  use        Standard__natural___axiom
  use        Standard__integer___axiom
  use        Show_runtime_errors__nat_array___axiom
  use        Show_runtime_errors__update__a___axiom
  use        Show_runtime_errors__update__i___axiom
  use        Show_runtime_errors__update__j___axiom
  use        Show_runtime_errors__update__p___axiom
  use        Show_runtime_errors__update__q___axiom
  use        Show_runtime_errors__update__S1b___axiom
  
  function [GP_Subp:show_runtime_errors.ads:7]
    [sloc:show_runtime_errors.ads:7] def (__void_param : unit) requires
    { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram show_runtime_errors.ads:7 *);
        assume
        { (if False then True  else
          (Show_runtime_errors__nat_array.dynamic_property
             Standard__integer.first Standard__integer.last
             (Show_runtime_errors__update__S1b.first
                (Show_runtime_errors__update__S1b.of_array
                   !Show_runtime_errors__update__a.a
                   (Standard__integer__rep.to_rep
                      Show_runtime_errors__update__a.a__first)
                   (Standard__integer__rep.to_rep
                      Show_runtime_errors__update__a.a__last)))
             (Show_runtime_errors__update__S1b.last
                (Show_runtime_errors__update__S1b.of_array
                   !Show_runtime_errors__update__a.a
                   (Standard__integer__rep.to_rep
                      Show_runtime_errors__update__a.a__first)
                   (Standard__integer__rep.to_rep
                      Show_runtime_errors__update__a.a__last))))) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Show_runtime_errors__update__i.i True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Show_runtime_errors__update__j.j True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Show_runtime_errors__update__p.p True False True True) };
        assume
        { (Standard__integer___axiom.dynamic_invariant
             Show_runtime_errors__update__q.q True False True True) };
        (* Assume moved pointers in outputs of the subprogram show_runtime_errors.ads:7 *);
        (* Check for RTE in the Pre of the subprogram show_runtime_errors.ads:7 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram show_runtime_errors.ads:7 *);
        (try
        ();
          ([sloc:show_runtime_errors.adb:5] ());
          ();
          ([GP_Sloc:show_runtime_errors.adb:7:17] ([sloc:show_runtime_errors.adb:7] (
                                                  Show_runtime_errors__update__a.a
                                                  :=
                                                  (Show_runtime_errors__update__S1b.to_array
                                                     (let ([mlw:proxy_symbol]
                                                     [introduced] temp___181)
                                                     =
                                                     (Show_runtime_errors__update__S1b.of_array
                                                        !Show_runtime_errors__update__a.a
                                                        (Standard__integer__rep.to_rep
                                                           Show_runtime_errors__update__a.a__first)
                                                        (Standard__integer__rep.to_rep
                                                           Show_runtime_errors__update__a.a__last))
                                                     in
                                                     --pp_record_update NOT IMPLEMENTED)))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures { True } begin  (let _ = True in ())  end

end
